
# interface GeneSymbolInterface {
#   sid: String!
#   status: String
#   taxid: String!
# }

# type GeneSymbol implements GeneSymbolInterface {
#   sid: String!
#   status: String
#   taxid: String!
# }

# interface Fragment {
#   sequence: Int!
#   kind: String!
#   text: String!
# }

# type FromBodyText implements Fragment {
#   sequence: Int!
#   kind: String!
#   text: String!
#   mentions: [GeneSymbol] @relation(name: "MENTIONS", direction: "OUT")
# }

type Patent {
  patentId: String!
  name: String! # just for debug
  patentTitle: [PatentTitle] @relation(name: "PATENT_HAS_PATENTTITLE", direction: "OUT")
}


type PatentTitle {
  _hash_id: String!
  lang: String!
  text: String!
  patents: [Patent] @relation(name: "PATENT_HAS_PATENTTITLE", direction: "IN")
}